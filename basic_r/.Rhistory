# 화살표 단축키 alt + -
ａ <- １
ｂ <- ２０
ａ <- ＂ｈｅｌｌｏ　ｗｏｒｌｄ＂
ａ <- １０
ａ <- ３．１４
# 화살표 단축키 alt + -
ａ <- １
ｂ <- ２０
ａ <- ＂ｈｅｌｌｏ　ｗｏｒｌｄ＂
ａ <- １０
ａ <- ３．１４
"asdasdasd"
x = "Hello World!"
# 화살표 단축키 alt + -
ａ <- １
ｂ <- ２０
ａ <- ＂ｈｅｌｌｏ　ｗｏｒｌｄ＂
ａ <- １０
ａ <- ３．１４
# 화살표 단축키 alt + -
# 저장 ctrl + s
ａ <- １
ｂ <- ２０
ａ <- ＂ｈｅｌｌｏ　ｗｏｒｌｄ＂
ａ <- １０
ａ <- ３．１４
# r의 연산자
a + b
# 화살표 단축키 alt + -
# 저장 ctrl + s
ａ = １
ｂ = ２０
ａ = ＂ｈｅｌｌｏ　ｗｏｒｌｄ＂
ａ = １０
ａ = ３．１４
# r의 연산자
a + b
# 화살표 단축키 alt + -
# 저장 ctrl + s
a <- 1
b <- 20
a <- 10
# r의 연산자
a + b
a <- 3.14
# r의 연산자
a + b
a / b
a == b
a > b
a != b
a > b
a < b
var1
var1
# r에서는 여러값으로 구성된 변수 combine()
var1 <- c(1,3,5,7,9)
var1
var2 <- c(1:100)
var2
var2
var3 <- c("a", "b", "c", "d")
var3
var3
var4 <- c(1, "2")
var4
# 여러값으로 구성된 변수 seq()
var5 <- seq(1, 10)
var5
var6 <- seq(1, 10, 2) #(시작값, 끝값, step값)
var6
var7 <- seq(2, 10, by = 2) #2~10까지 2씩 증가가
var7
# 변수의 연산
var1 + 100 # 모든 변수에 100씩 더해진다
var1 + var2
var1 + var2 # var1을 반복적으로 var2에 더해준다
var3 + 10
class(a)
# 숫자형변수
a <- 1
class(a)
class(a)
a <- 3.14
class(a)
class(b)
b <- "1"
class(b)
c <- c(1:10)
class(c)
d <- TRUE
class(d)
# 범주형 변수
factor(c(1,2,3,2,2,2,1,3))
# 범주형 변수
e <- factor(c(1,2,3,2,2,2,1,3))
e
class(e)
levels(e)
as.character(a)
as.character(c)
as.numeric(b)
as.factor(c)
##################################################
# 객체형 데이터 타입
# vector- 한 가지 타입으로 생성된 변수
c(1,2,3,4,5)
c(1:10)
# dataframe - 여러타입이 합쳐진 2차원 구조
data.frame(a = c(1,3,4),
b = c("park", "hong", "kim"))
# dataframe - 여러타입이 합쳐진 2차원 구조
data.frame(a = c(1,2,3,4),
b = c("park", "hong", "kim"))
# 행렬(metrix): 한가지 타입으로 만들어진 2차원구조조
matrix(c(1:6), nrow = 3, ncol = 2)#(변수, 차원구조(nrow:행, ncol: 열))
matrix(c(1:6), nrow = 2, ncol = 3))
matrix(c(1:6), nrow = 2, ncol = 3)
matrix(c(1:6), nrow = 3, ncol = 3)# 모자란 경우에는 앞의 원소를 채워준다다
as.data.frame(matrix(c(1:6), nrow = 2, ncol = 3))
as.data.frame(matrix(c(1:6), nrow = 2, ncol = 3))# data.frame형태로 형변환
# Array - 다차원의 구조의 행렬
array(c(1:15), dim = c(3,4,5)) #3행 4열 3차원원
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 3, ncol = 2))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 2, ncol = 4))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 2, ncol = 2))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 2, ncol = 10))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 2, ncol = 5))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:10),nrow = 3, ncol = 2))
# list = 모든 요소를 담는 다차원 구조
list(a = c(1:5),
b = data.frame(a = c(1,2,3), b = c("kim", "lee", "choi")),
c = matrix(c(1:6),nrow = 3, ncol = 2))
x <- c(1:10)
x <- c(1:10)
x
sum(x)
mean(x)
max(x)
min(x)
median(x)
y <- c(1:10, NA, 11:30)
y
y <- c(1:10, NA, 11:20)#combine변수의 조합
y
nean(y, na.rm = T)
mean(y, na.rm = T)
# 문자형 함수 nchar(), paste()
str1 <- "hello world"
str2 <-  "my name is ban"
str3 <-  c("a", "b", "c", "d", "e")
# 문자열의 길이 확인
nchar(str1)
nchar(str2)
nchar(str3)
# paste(): 문자열 붙이기 함수수
paste(str1, str2)
str1 + 10
paste(str1 + 10, str2)
paste(str1, 10, str2)
paste(str1, str2)
# sep = 옵션: separate(분리)
paste(str1, str2, sep = ",")
paste(str1, str2, sep = "-")
paste(str3, sep = ",")
# combine형 변수에는 collapse옵션을 사용한다
paste(str3, collapse = ",")
# 문자열 자르기
str1
substr(str1, 1, 2)
substr(str1, 1, 3) # 1
substr(str1, 6, 10) # 1~3번을 자르기
substr(str1, 6, 11) # 1~3번을 자르기
substr(str1, 7, 11) # 1~3번을 자르기
# nchar()와 함께 사용해보자
substr(str1, 7, nchar(str1))
############################################################
## 패키지 설치
install.packages("ggplot2")
library(ggplot2)
qplot(x)
x <- c(1,1,1,2,2,3,4,5)
qplot(x)
# 패키지에는 연습용 데이터가 존재함
data(package = .packages(all.available = TRUE))
mgp
mpg
as.data.frame(mpg)
mpg <- as.data.frame(mpg)
mpg
mpg
class(mpg)
#qplot(): 단순한 데이터 형태를 확인할 때 사용
qplot(data = mpg, x = hwy)
qplot(data = mpg, x = cty)
#qplot(): 단순한 데이터 형태를 확인할 때 사용
qplot(data = mpg, x = hwy) # 자동차 데이터의 고속도로 연비
qplot(data = mpg, x = cty)
qplot(data = mpg, x = drv)
qplot(data = mpg, x = cty, y = drv)
qplot(data = mpg, x = cty, y = hwy)
qplot(data = mpg, x = drv, y = hwy)
qplot(data = mpg, x = drv, y = cty)
qplot(data = mpg, x = cty, y = hwy)
qplot(data = mpg, x = drv, y = cty, geom = "line")
qplot(data = mpg, x = drv, y = cty, geom = "red")
qplot(data = mpg, x = drv, y = cty, geom = "red")
qplot(data = mpg, x = drv, y = cty, geom = "line", color = "red")
qplot(data = mpg, x = drv, y = cty, geom = "line", color = "drv")
qplot(data = mpg, x = drv, y = cty, geom = "line", color = drv)
qplot(data = mpg, x = drv, y = cty, geom = "boxplot", color = drv)
########################
# 다섯명의 시험점수를 가지고 있는 변수를  80, 54, 75, 34, 90
# 평균 합계 새로운 변수에 저장해서 확인
x <- c(80, 54, 75, 34, 90)
sum(x)
mean(x)
sum <- sum(x)
mean <- mean(x)
sum
mean
########################
# 다섯명의 시험점수를 가지고 있는 변수를  80, 54, 75, 34, 90
# 평균 합계 새로운 변수에 저장해서 확인
score <- c(80, 54, 75, 34, 90)
sum <- sum(score)
mean <- mean(score)
clearPushBack()
# 외부데이터 불러오기
getwd()
setwd("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r")
read.table("excel_exam.txt")
read.table("data/excel_exam.txt")
d1 <- read.table("data/excel_exam.txt")
d1
class(d1)
d1 <- read.table("data/excel_exam.txt", header = T)
class(d1)# data.frame형태 확인됨
d1
read.delim("data/excel_exam.txt")
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
read.delim("data/excel_exam.txt", header = T)
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d2
d3 <- read.csv("data/excel_exam.csv")
d3
class(d3)
str(d3)
########################################################
# excel파일을 읽기 위해서 패키지 설치
install.packages("readxl")
library("readxl")
library(readxl)# 라이브러리 로드
d4 <- read_excel("data/excel_exam.xlsx")
d4
class(d4)
d4 <- as.data.frame(d4)
class(d4) # 데이터 프레임으로 변경이 필요
excel_exam <- read.delim("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r/data/excel_exam.txt", quote="")
View(excel_exam)
excel_exam <- read.delim("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r/data/excel_exam.txt", quote="", stringsAsFactors=TRUE)
View(excel_exam)
library(readxl)
excel_exam <- read_excel("data/excel_exam.xlsx",
sheet = "Sheet1")
View(excel_exam)
# 데이터 저장하기기
name <- c("park", "kim", "lee", "choi", "hong")
kor <- C(10, 20, 30, 40, 50)
kor <- c(10, 20, 30, 40, 50)
eng <- c(23, 45, 64, 34, 23)
d5 <- data.frame(name, kor, eng)
class(d5)
write.csv(d5, file = "data/export.csv")
write.csv(d5, file = "C:\\Users\\Win10\\Desktop\\Backup\\workspace\\GookBe\\GB_R/basic_r\\data\\exprot2.csv")
## 데이터프레임 함수
library(ggplot2)
mpg
as.data.frame(mpg)
mpg <- as.data.frame(mpg)
class(mpg)
mpg
## 데이터프레임 앞부분 확인
head(mpg)
tail(mpg, 20) # 끝에서 20행 가져옴
## 테이블 구조로 데이터 확인
View(mpg)
## 데이터 프레임의 구조 확인 str(), dim(), nrow(), ncol()
str(mpg)
dim(mpg) #234행 11혈혈
dim(mpg) #234행 11열열
nrow(mpg)
ncol(mpg)
# summary(): 요약통계 산출
summary(mpg)
colnames(mpg)
rownames(mpg) # 행 이름만 추출
