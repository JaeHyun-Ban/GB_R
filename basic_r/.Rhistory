table(is.na(house$area))
table(is.na(house$year))
table(is.na(house$month))
table(is.na(house$price)) # price에 결측치가 존재
house %>%
filter(year %in% 2019 & !is.na(price) & region %in% "서울") %>%
group_by(month) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = month, y = mean_price)) +
geom_line() +
labs(title = "2019년 서울지역 월별 평균변화", x = "월", y = "평당분양가격평균")
d2 <- house %>%
filter(!is.na(price)) %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
d2 <- as.data.frame(d2)
d2
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
d2 <- as.data.frame(d2)
d2
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line()
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line()
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = year, y = mean_price, fill = month)) +
geom_line()
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line()
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
d2
d2 %>%
ggplot(aes(x = year, mean_price)) +
geom_line()
d2 %>%
ggplot(aes(x = year, y = mean_price)) +
geom_line()
# 시각화 작업
ggplot(ageg_rel_div_pct, aes(x = ageg, y = pct, fill = religion_yn)) +
geom_col(position = "dodge") +
labs(title = "연령대, 종교에 따른 이혼율", x = "연령대", y = "이혼율")
head(data)
head(data)
d2 %>%
ggplot(aes(x = year, y = mean_price, fill = month)) +
geom_line()
d2 %>%
ggplot(aes(x = year, y = mean_price, fill = month)) +
geom_line()
d2 %>%
ggplot(aes(x = month, y = mean_price, fill = month)) +
geom_line()
d2 %>%
ggplot(aes(x = month, y = mean_price, fill = year)) +
geom_line()
d2 %>%
ggplot(aes(x = month, y = mean_price)) +
geom_line()
d2
d2 <- as.data.frame(d2)
d2
d2 %>%
ggplot(aes(x = month, y = mean_price)) +
geom_line()
d2 %>%
group_by(month)
d2
eco <- as.data.frame(economics)
#psavert: 저축률, uempmed: 실업기간간
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = "red")
eco
d2
date_set <- as.Date("2015-10-01", "2020-02-01", by = "month")
date_set
d2 %>%
mutate(date = year + month)
start <- as.Date("2015-10-01")
end <- as.Date("2020-02-01")
date_set <- seq(start, end, by = 1)
date_set
date_set <- seq(start, end, by = "month")
date_set
d2 %>%
ncol(date_set)
d2 <- rbind(d2, date_set)
d2
date_set
class(date_set )
d2 %>%
gggplot(aes(date_set, mean_price)) +
geom_line()
d2 %>%
gggplot(aes(date_set, mean_price)) +
geom_line()
d2 %>%
ggplot(aes(date_set, mean_price)) +
geom_line()
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line()
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line()
#================================================
# 상자 그래프
ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
# 시계열 그래프로 사용할 수 있는 데이터세트
df <- data.frame(date, num)
# 날짜별 데이터 프레임
ggplot(df, aes(x = date, y = num)) +
geom_line()
# 날짜별 데이터 프레임
ggplot(df, aes(x = date, y = num)) +
geom_line()
#psavert: 저축률, uempmed: 실업기간간
ggplot(eco, aes(x = date, y = psavert)) +
geom_line(color = "red")
eco
date_set <- as.data.frame(date_set)
d2 <- rbind(d2, date_set)
date_set
d2 <- rbind(d2, date_set)
d2
date_set
d2
d2 <- house %>%
filter(!is.na(price) & region %in% "서울") %>%
group_by(year, month) %>%
summarise(mean_price = mean(price))
d2
d2
d2 <- as.data.frame(d2)
d2
d2 <- rbind(d2, date_set)
date_set
d2
d2 <- rbind(d2, date_set)
d2 <- cbind(d2, date_set)
d2
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line()
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red")
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") %>%
geom_hline(yintercept = mean_price)
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") %>%
geom_hline(yintercept = mean(d2$mean_price))
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") %>%
geom_hline(yintercept = mean(d2$mean_price))
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") +
geom_hline(yintercept = mean(d2$mean_price))
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") +
geom_hline(yintercept = mean(d2$mean_price), color = "green")
d2 %>%
ggplot(aes(x = date_set, y = mean_price)) +
geom_line(color = "red") +
geom_hline(yintercept = mean(d2$mean_price), color = "green") +
labs(title = "연도별 아파트분양가 변화동향", x = "연도", y = "평균분양가격평균")
# 1. 작업폴더 확인
getwd()
setwd()
setwd()
setwd("")
setwd("C:\Users\Win10\Desktop\Backup\국비반자료\upload") # 작업폴더 변경
setwd("C:\\Users\\Win10\\Desktop\\Backup\\국비반자료\\upload") # 작업폴더 변경
# 2. png로 결과를 이미지로 출력하기
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
## png가 사용하기에 편함
png(width = 500, width = 500, filename = test.png) # 1단계
## png가 사용하기에 편함
png(width = 500, height = 500, filename = test.png) # 1단계
geom_col()
ggplot(mpg, aes(x = class, y = hwy, fill = class) +
ggplot(mpg, aes(x = class, y = hwy, fill = class) +
mpg
ggplot(mpg, aes(x = class, y = hwy, fill = class)) +
geom_col()
ggplot(mpg, aes(x = class, y = hwy, fill = class)) +
geom_col()
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_col()
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_bar()
## png가 사용하기에 편함
png(width = 500, height = 500, filename = "test.png") # 1.png파일 경로선언
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_bar() # bar = 누적 막대차트/ 2. 출력결과를 시각화
graphics.off() # 3. 그래픽 써내리기
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_bar()
# 3. PDF로 결과물 출력하기
pdf(file = "test.pdf")
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_bar()
graphics.off()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2020-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
install.packages("tinytex")
library(tinytex)
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
summary(mpg)
library(ggplot2)
summary(mpg)
---
title: "R마크다운문법"
author: "홍길동"
date: "2021-01-11"
---
ggplot(mpg, aes(x = class, fill = class)) +
geom_bar()
ggplot(mpg, aes(x = reorder(class), fill = class)) +
geom_bar() +
ggplot(mpg, aes(x = class, fill = class)) +
geom_bar()
install.packages("Rserve")
library(Rserve)
library(Rserve)
Rserve(FALSE, port = 6311, args = '--RS-encoding utf8 --no-save --slave --encoding --internet2')
Rserve(args = "--RS- encoding utf8")
setwd('C:\\Users\\Win10\\Desktop\\Backup\\국비반자료\\upload')
library(ggplot2)
mpg <- as.data.frame(mpg)
library(ggplot2)
mpg <- as.data.frame(mpg)
png(width = 500, height = 500, filename = "파일이름.png")
ggplot(mpg, aes(x = class, fill = class)) + geom_bar()
graphics.off()
library(ggplot2)
library(ggplot2)
mpg <- as.data.frame(mpg)
png(width = 500, height = 500, filename = "파일이름.png")
ggplot(mpg, aes(x = class, fill = class)) + geom_bar()
graphics.off()
ggplot(mpg, aes(x = class, fill = class)) + geom_bar()
graphics.off()
setwd('C:\\Users\\Win10\\Desktop\\Backup\\국비반자료\\upload')
library(ggplot2)
mpg <- as.data.frame(mpg)
print(png(width = 500, height = 500, filename = '파일이름1.png'))
print(ggplot(mpg, aes(x = class, fill = class)) + geom_bar())
print(graphics.off())
#####
library(ggplot2)
library(dplyr)
mpg <- as.data.frame(mpg)
d1 <- as.data.frame(mpg) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
ggplot(d1, aes(x = manufacturer, y = mean_hwy)) +
geom_col()
ggplot(d1, aes(x = manufacturer, y = mean_hwy, fill = manufacturer)) +
geom_col()
ggplot(d1, aes(x = reorder(manufacturer, mean_hwy), y = mean_hwy, fill = manufacturer)) +
geom_col()
ggplot(d1, aes(x = reorder(manufacturer, -mean_hwy), y = mean_hwy, fill = manufacturer)) +
geom_col()
ggplot(d1, aes(x = reorder(manufacturer, -mean_hwy), y = mean_hwy, fill = manufacturer)) +
geom_col() +
coord_flip()
print(ggplot(d1, aes(x = reorder(manufacturer, -mean_hwy), y = mean_hwy, fill = manufacturer)) +
geom_col() +
coord_flip())
png(width = 500, height = 500, filename = 'd1.png')
print(ggplot(d1, aes(x = reorder(manufacturer, -mean_hwy), y = mean_hwy, fill = manufacturer)) +
geom_col() +
coord_flip())
print(graphics.off())
install.packages("rJava")
install.packages("multilinguer")
library(rJava)
library(multilinguer)
# 의존성 패키지 설치
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools') type = "binary")
# 의존성 패키지 설치
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
# 깃허브 버전 설치
install.packages("remotes")
# 리모트
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts = c("--no-nultiarch"))
# 리모트
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts = c("--no-multiarch"))
library(KoNLP)
library(rJava)
library(KoNLP)
library(KoNLP)
useNIADic()
useNIADic()
#========================================
# 1. 데이터를 한줄씩 읽는다
song <- readLines("data/song.txt")
#========================================
# 1. 데이터를 한줄씩 읽는다
song <- readLines("data/song.txt")
#========================================
# 1. 데이터를 한줄씩 읽는다
song <- readLines("data/song.txt")
song
#========================================
# 1. 데이터를 한줄씩 읽는다
song <- readLines("data/song.txt")
#========================================
# 1. 데이터를 한줄씩 읽는다
song <- readLines("data/song.txt")
song
# 2. stringr패키지를 이용해서 특수문자를 제거
library(stringr)
str_replace_all(song, "\\w,", " ")
song <- str_replace_all(song, "\\w,", " ")
library(rJava)
library(multilinguer)
# 위 설치를 모두 완료후에 확인
library(KoNLP)
useNIADic()
# extractNoun(KoNLP): 문장에서 명사를 추출
extractNoun("동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세")
# 3. 명사추출
song_list <- extractNoun(song)
song_list
class(song_list)
# 4. unlist함수를 이용해서 vector형으로 형변환
song_vec <- unlist(song_list)
class(song_vec)
song_vec
# 5. vector형에서 분석을 위해 dataframe으로 변경
song_df <- as.data.frame(song_vec)
song_df
# 6. 분석을 위한 컬럼명 변경
library(dplyr)
rename(song_df, word = song_vec)
song_df <- rename(song_df, word = song_vec)
head(song_df)
# 7. 분석(단어의 자주사용된 빈도를 내림차순 정렬)
song_df %>%
group_by(word) %>%
summarise(feq = n()) # 빈도 확인
# 7. 분석(단어의 자주사용된 빈도를 내림차순 정렬)
song_df %>%
filter(nchar(word) >= 2) %>%
group_by(word) %>%
summarise(feq = n()) # 빈도 확인
# 7. 분석(단어의 자주사용된 빈도를 내림차순 정렬)
song_df %>%
filter(nchar(word) >= 2) %>%
group_by(word) %>%
summarise(feq = n()) %>%  # 빈도 확인
arrange(desc(feq))
# 7. 분석(단어의 자주사용된 빈도를 내림차순 정렬)
result <- song_df %>%
filter(nchar(word) >= 2) %>% #단어 길이가 2이상인 것
group_by(word) %>%
summarise(feq = n()) %>%  # 빈도 확인
arrange(desc(feq))
View(result)
# 8. wordcloud 설치
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
# 색상목록을 추춢
?brewer # 확인하기
brewer.pal(8, "Accent")
brewer.pal(12, "Set3")
color <- brewer.pal(12, "Set3")
song_dfword
song_df$word
wordcloud(words = song_df$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.5),
colors = color)
wordcloud(words = song_df$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(3, 0.3),
colors = color)
wordcloud(words = song_df$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = color)
color <- brewer.pal(8, "Accent")
wordcloud(words = song_df$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = color)
song_df
head(song_df)
wordcloud(words = result$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4, 0.3),
colors = color)
wordcloud(words = result$word,
freq = result$feq, #빈도
min.freq = 2, #최소 빈도
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(3, 0.3),
colors = color)
