qplot(data = mpg, x = drv, y = cty, geom = "boxplot", color = drv)
########################
# 다섯명의 시험점수를 가지고 있는 변수를  80, 54, 75, 34, 90
# 평균 합계 새로운 변수에 저장해서 확인
x <- c(80, 54, 75, 34, 90)
sum(x)
mean(x)
sum <- sum(x)
mean <- mean(x)
sum
mean
########################
# 다섯명의 시험점수를 가지고 있는 변수를  80, 54, 75, 34, 90
# 평균 합계 새로운 변수에 저장해서 확인
score <- c(80, 54, 75, 34, 90)
sum <- sum(score)
mean <- mean(score)
clearPushBack()
# 외부데이터 불러오기
getwd()
setwd("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r")
read.table("excel_exam.txt")
read.table("data/excel_exam.txt")
d1 <- read.table("data/excel_exam.txt")
d1
class(d1)
d1 <- read.table("data/excel_exam.txt", header = T)
class(d1)# data.frame형태 확인됨
d1
read.delim("data/excel_exam.txt")
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
read.delim("data/excel_exam.txt", header = T)
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d2
d3 <- read.csv("data/excel_exam.csv")
d3
class(d3)
str(d3)
########################################################
# excel파일을 읽기 위해서 패키지 설치
install.packages("readxl")
library("readxl")
library(readxl)# 라이브러리 로드
d4 <- read_excel("data/excel_exam.xlsx")
d4
class(d4)
d4 <- as.data.frame(d4)
class(d4) # 데이터 프레임으로 변경이 필요
excel_exam <- read.delim("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r/data/excel_exam.txt", quote="")
View(excel_exam)
excel_exam <- read.delim("C:/Users/Win10/Desktop/Backup/workspace/GookBe/GB_R/basic_r/data/excel_exam.txt", quote="", stringsAsFactors=TRUE)
View(excel_exam)
library(readxl)
excel_exam <- read_excel("data/excel_exam.xlsx",
sheet = "Sheet1")
View(excel_exam)
# 데이터 저장하기기
name <- c("park", "kim", "lee", "choi", "hong")
kor <- C(10, 20, 30, 40, 50)
kor <- c(10, 20, 30, 40, 50)
eng <- c(23, 45, 64, 34, 23)
d5 <- data.frame(name, kor, eng)
class(d5)
write.csv(d5, file = "data/export.csv")
write.csv(d5, file = "C:\\Users\\Win10\\Desktop\\Backup\\workspace\\GookBe\\GB_R/basic_r\\data\\exprot2.csv")
## 데이터프레임 함수
library(ggplot2)
mpg
as.data.frame(mpg)
mpg <- as.data.frame(mpg)
class(mpg)
mpg
## 데이터프레임 앞부분 확인
head(mpg)
tail(mpg, 20) # 끝에서 20행 가져옴
## 테이블 구조로 데이터 확인
View(mpg)
## 데이터 프레임의 구조 확인 str(), dim(), nrow(), ncol()
str(mpg)
dim(mpg) #234행 11혈혈
dim(mpg) #234행 11열열
nrow(mpg)
ncol(mpg)
# summary(): 요약통계 산출
summary(mpg)
colnames(mpg)
rownames(mpg) # 행 이름만 추출
## 데이터프레임 함수
library(ggplot2)
## 데이터프레임 앞부분 확인
head(mpg)
head(mpg, 20)# 앞부분 20행만 가져옴
tail(mpg)
# summary(): 요약통계 산출
summary(mpg)
mpg <- as.data.frame("mpg")
library(ggplot2)
# 인덱싱을 활용한 데이터 추출
# 변수명[행, 열]
mpg
mpg <- as.data.frame("mpg")
# 인덱싱을 활용한 데이터 추출
# 변수명[행, 열]
mpg
# 데이터 추출
library(ggplot2)
mpg <- as.data.frame("mpg")
mpg <- as.data.frame(mpg)
mpg <- as.data.frame(mpg)
# 인덱싱을 활용한 데이터 추출
# 변수명[행, 열]
mpg
# 데이터 추출
library(ggplot2)
mpg <- as.data.frame(mpg)
# 인덱싱을 활용한 데이터 추출
# 변수명[행, 열]
mpg
mpg[3,]#3행 추출출
mpg[3,]#3행 추출
mpg[15,]#15행추출출
mpg[1:6, ]# 1~6행 추출
mpg[c(2,4,6), ] #2,4,6행만 추출(combine로 묶어준다)
mpg[c(1:6, 8, 10), ] #1~6, 8, 10행만 추출
# 인덱싱을 활용한 데이터 열추출
mpg[,3]
mpg[,1:6] #1~6열 추출출
mpg[, c(1:6, 8, 10)]
## 나중에 데이터가 너무 크면 특정 열을 뽑아도 뭔지 모른다
mpg[, "model"] # model열만 추출출
mpg[, c("model", "class")] # model, class 열만 추출
# 인덱싱을 활용한 데이터 행영추출
mpg[1,3]
# 인덱싱을 활용한 데이터 행영추출
mpg[1,3]
# 인덱싱을 활용한 데이터 행영추출
head[mpg]
# 인덱싱을 활용한 데이터 행영추출
head[mpg]
# 인덱싱을 활용한 데이터 행영추출
head(mpg)
mpg[1:3, 3:6]
mpg[1:3, 2:5]
mpg[1:3, 2:3]
mpg[4:6, c("displ", "year", "trans")]
# 주의
# 데이터프레임에서 컬럼이 1개인 경우에는 vector형으로 결과가 나온다
mpg[1:3, 1]
mpg[1:3, "model"]
###############################################
# 데이터 프레임에서 특정행에 대한 결과를 보려면 $컬럼명을 사용
mpg$manufacturer
mpg$model
mpg$year
mpg$class
mpg$class == suv
mpg$class == "suv"
mpg[mpg$model == "a4"]
str(mpg)
mpg[mpg$model == "a4",] # 모델이 a4인 행
mpg[mpg$year >= 2000, ]
mpg[mpg$cty >= 20, ] #도로연비(cty)가 20이상인 행행
mpg[mpg$cty >= 20, ] #도로연비(cty)가 20이상인 행
mpg[mpg$cty >= 20 & mpg$hwy >= 30,]
# quiz해결
c("제품", "가격", "판매량")
# quiz해결
a <- c("제품", "가격", "판매량")
class(a)
str(a)
# quiz해결
quiz <- as.data.frame(c("제품", "가격", "판매량"), c("사과", 1800, 24), c("딸기", 1500, 38), c("수박", 3000, 13))
# quiz해결
quiz <- as.data.frame(c("제품", "가격", "판매량"), c("사과", 1800, 24), c("딸기", 1500, 38), c("수박", 3000, 13))
# quiz해결
quiz <- as.data.frame(c("제품", "가격", "판매량"),
c("사과", 1800, 24),
c("딸기", 1500, 38),
c("수박", 3000, 13))
# quiz해결
quiz <- as.data.frame(a = c("제품", "가격", "판매량"),
b = c("사과", 1800, 24),
c = c("딸기", 1500, 38),
d = c("수박", 3000, 13))
# quiz해결
quiz <- data.frame(c("제품", "가격", "판매량"),
c("사과", 1800, 24),
c("딸기", 1500, 38),
c("수박", 3000, 13))
class(quiz)
# 과일가격평균, 판매량합계, 평균
avg <- quiz["가격"]
# 과일가격평균, 판매량합계, 평균
avg <- quiz["가격",]
avg
# 과일가격평균, 판매량합계, 평균
quiz["가격",]
# 과일가격평균, 판매량합계, 평균
quiz[mpg$"가격격"]
# 과일가격평균, 판매량합계, 평균
quiz[mpg$"가격",]
View(quiz)
View(quiz)
View(quiz)
##############################################################
# quiz생성
quiz <- data.frame(c("제품", "가격", "판매량"),
c("사과", 1800, 24),
c("딸기", 1500, 38),
c("수박", 3000, 13))
quiz
View(quiz)
View(quiz)
##############################################################
# quiz생성
quiz <- data.frame(c("제품", "가격", "판매량"),
c("사과", 1800, 24),
c("딸기", 1500, 38),
c("수박", 3000, 13))
quiz
quiz <- data.frame(a = c(1,2,3),
b = c("park", "hong", "kim"))
quiz
##############################################################
# quiz생성
quiz <- data.frame(product = c("사과", "딸기", "수박"),
price = c(1800, 1500, 3000),
order = (24, 38, 13))
##############################################################
# quiz생성
quiz <- data.frame(product = c("사과", "딸기", "수박"),
price = c(1800, 1500, 3000),
order = c(24, 38, 13))
quiz
# 과일가격평균, 판매량합계, 평균
quiz[quiz$price]/3]
# 과일가격평균, 판매량합계, 평균
quiz[quiz$price]/3,]
View(quiz)
# 과일가격평균, 판매량합계, 평균
quiz[quiz$price]
# 과일가격평균, 판매량합계, 평균
quiz[quiz$price, ]
# 과일가격평균, 판매량합계, 평균
quiz[, quiz$price]
# 과일가격평균, 판매량합계, 평균
quiz[, price]
# 과일가격평균, 판매량합계, 평균
quiz[price]
# 과일가격평균, 판매량합계, 평균
quiz["price"m]
# 과일가격평균, 판매량합계, 평균
quiz["price",]
# 과일가격평균, 판매량합계, 평균
quiz[,"price"]
# 과일가격평균, 판매량합계, 평균
quiz[,"price"/3]
# 과일가격평균, 판매량합계, 평균
quiz[,quiz$"price"]
# 과일가격평균, 판매량합계, 평균
quiz[,quiz$price/3]
# 과일가격평균, 판매량합계, 평균
sum(quiz$price)
mean(quiz$price)
sum(quiz$order)
mean(quiz$order)
# 데이터 수정하기
exam <- read.csv("/data/excel_exam.csv", stringsAsFactors = F)
# 데이터 수정하기
exam <- read.csv("/data/excel_exam.csv", stringsAsFactors = F)
# 데이터 수정하기
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
exam
str(exam)
exam[1, ] <- 100 #첫행값을 100으로 변경
exam[c(1,3,5), ] <- 100 #1,3,5행 변경경
# 데이터 열 수정하기
exam[, 4] <- 50
exam[, "english"] <- 70
exam
# 데이터 부분 수정하기
exam[10, "math"] <- 1000
exam
head(exam)
# 데이터 열 추가하기
# 열인데기스 or 열이름을 이용해서 추가
exam[, 6] <- "hello"
exam
exam[, ncol(exam)+1] <- "bye" # 열 + 1을 통해 항상 새로운 열을 생성함함
exam
exam[, "xxx"] <- "abc"
exam
exam$yyy <- "yyy"
exam
# 컬럼명의 수정 - colnames()
colnames(exam)
colnames(exam)[6] <- "zzz"
exam
exam
colnames(exam)[7] <- "kkk"
head(exam)
colnames(exam)[6:9] <- c("aaa", "bbb", "ccc", "ddd") # 중요(★)
# 컬럼이름으로
colnames(exam) <- c("a", "b", "c", "d", "e", "f", "g", "h", "u") #이런식으로 가능
exam
# 컬럼이름으로
colnames(exam)["i"] <- "test"
head(exam)
test <- c("aaa", "bbb", "ccc")
test["aaa"]
# 컬럼이름으로는 찾을 수 없다
colnames(exam)["i"] <- "test"
test["aaa"] # 항상 인덱싱을 통해 찾을 수 있다
exam <- read.csv("data/excel_exam.csv")
exam
exam$math
exam$english
exam$science
exam$math + exam$english + exam$science
a <- c(1,3,4,5)
exam$math + exam$english + exam$science + a# 열 갯수가 맞으며
exam$total <- exam$math + exam$english + exam$science # 열 갯수가 안맞아도 잘 더해짐
exam$avg <- (exam$math + exam$english + exam$science) / 3
# ifelse(exam$avg >= 60, TRUE, FALSE) #60보다 크면 TRUE, 아니면 FALSE
exam$pass_fail <- ifelse(exam$avg >= 60 , "Y", "N")
exam
exam$level <- ifelse(exam$avg >= 60, "high", ifelse(exam$avg <= 40), "row", "middel")
exam$level <- ifelse(exam$avg >= 60, "high", ifelse(exam$avg <= 40, "row", "middel"))
exam
exam$level <- ifelse(exam$avg >= 80, "high", ifelse(exam$avg <= 60, "row", "middel"))
exam
library(ggplot2)
mpg <- as.data.frame(mpg)
aaa <- mpg[1:3, 1:4]
bbb <- mpg[11:13, 1:4]
aaa
bbb
cbind(aaa, bbb)
rbind(aaa, bbb)
ccc <- mpg[1:2, 1:5]
ddd <- mpg[11:12, 1:4]
cbind(aaa, ccc)
ddd <- mpg[1:3, 1:5]
rbind(aaa, ddd)
# 열 데이터의 빈도수
table(mpg$model) #model데이터의 빈도수수
# 열 데이터의 빈도수
table(mpg$model) #model데이터의 빈도수
table(mpg$year)
table(mpg$manufacturer)
table(mpg$manufacturer)
# 열데이터를 여러개 넣으면 다차원으로 빈도수 확인
table(mpg$manufacturer, mpg$year)
#hist(빈도수): 간략한 그래프
hist(table$year)
#hist(빈도수): 간략한 그래프
hist(mpg$year)
#hist(빈도수): 간략한 그래프
hist(table(mpg$year)
#hist(빈도수): 간략한 그래프
hist(table(mpg$year)
#hist(빈도수): 간략한 그래프
hist(table(mpg$year))
hist(table(mpg$model))
hist(table(mpg$manufacturer))
library(ggplot2)
mpg
class(mpg)mpg
class(mpg)
mpg <- as.data.frame(mpg)
class(mpg)
mpg$cty
head(mpg)
head(mpg)["year"]
# 02 컬럼명 수정: colnames
colnames(mpg$cty) <- city
# 02 컬럼명 수정: colnames
colnames(mpg)[cty] <- "city"
# 02 컬럼명 수정: colnames
colnames(mpg)[cty]
# 02 컬럼명 수정: colnames
colnames(mpg)["cty"]
# 02 컬럼명 수정: colnames
colnames(mpg)["cty"] <- "city"
# 02 컬럼명 수정: colnames
colnames(mpg)
# 02 컬럼명 수정: colnames
colnames(mpg)[8:9] <- c("city", "highway")
colnames(mpg)
# 03 복사본 데이터를 이용해서 cty + hwy/2의 total컬럼을 만드세요
mpg$total <- (mpg$city + mpg$highway) / 2
mpg
# 04 컬럼 total의 평균을 출력하세요
mean(mpg$total)
# 05 total에 따른 파생변수 test를 생성합니다(조건: total >= 20이상 PASS 나머지 FAIL)
test <- ifelse(mpg$total >= 20, "PASS", "FAIL")
test
# 06 total에 따른 파생변수 grade를 생성합니다(24이상 A, 20이상 B, 나머지는 C)
grade <- ifelse(mpg$total >= 24, "A", ifelse(mpg$total  >= 20, "B", "C"))
grade
# 07 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해보세요, 아래와 같은 결과물이 출력되어야 한다
mpg$test <- test
mpg$grage <- grade
mpg[1:7]
mpg
# 01
mpg <- as.data.frame(mpg)
class(mpg)
# 02 컬럼명 수정: colnames
colnames(mpg)[8:9] <- c("city", "highway")
colnames(mpg)
# 03 복사본 데이터를 이용해서 cty + hwy/2의 total컬럼을 만드세요
mpg$total <- (mpg$city + mpg$highway) / 2
mpg
rbind(mpg, test)
# 05 total에 따른 파생변수 test를 생성합니다(조건: total >= 20이상 PASS 나머지 FAIL)
test <- ifelse(mpg$total >= 20, "PASS", "FAIL")
# 06 total에 따른 파생변수 grade를 생성합니다(24이상 A, 20이상 B, 나머지는 C)
grade <- ifelse(mpg$total >= 24, "A", ifelse(mpg$total  >= 20, "B", "C"))
rbind(mpg, test)
mpg
mpg
rbind(mpg, grage)
# 06 total에 따른 파생변수 grade를 생성합니다(24이상 A, 20이상 B, 나머지는 C)
grade <- ifelse(mpg$total >= 24, "A", ifelse(mpg$total  >= 20, "B", "C"))
grade
rbind(mpg, grage)
rbind(mpg, grade)
mpg <- rbind(mpg, test)
mpg
str(mpg)
levels(mpg)
class(mpg)
aaa
mpg <- rbind(mpg, test)
mpg
rbind(mpg, test)
test
rbind(mpg, test)
cbind(mpg, test)
rbind(mpg, test)
max
# 05 total에 따른 파생변수 test를 생성합니다(조건: total >= 20이상 PASS 나머지 FAIL)
mpg$test <- ifelse(mpg$total >= 20, "PASS", "FAIL")
# 06 total에 따른 파생변수 grade를 생성합니다(24이상 A, 20이상 B, 나머지는 C)
mpg$grade <- ifelse(mpg$total >= 24, "A", ifelse(mpg$total  >= 20, "B", "C"))
mpg
mpg
head(mpg, 6)
# ggplot2 패키지에는 미국 동북중부 437개 지역의 인구통계 정보를 담은 midwest라는 데이터가 포함되어
# 있습니다. midwest 데이터를 사용해 데이터 분석 문제를해결해보세요.
data(package = .packages(all.available = T))
library(ggplot2)
midwest
?midwest
midwest
temp <- as.data.frame(midwest)
temp
# • Q01. ggplot2 의 Midwest 데이터를 데이터 프레임 형태로 불러와서 데이터의 (구조, 끝부분, 뷰 창, 차원, 요약)을 파악하세요.
temp <- as.data.frame(midwest)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
names(temp$poptotal) <- "total"
names(temp$popasian) <- "asian"
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(temp$poptotal) <- "total"
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(temp$poptotal) <- "total"
library(ggplot2)
# • Q01. ggplot2 의 Midwest 데이터를 데이터 프레임 형태로 불러와서 데이터의 (구조, 끝부분, 뷰 창, 차원, 요약)을 파악하세요.
temp <- as.data.frame(midwest)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
colnames(temp$poptotal) <- "total"
temp
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp, 1)
ncol(temp)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp,0)
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp, 0)
colnames(5) <- "total"
colnames(temp)[5] <- "total"
colnames(temp)[9] <- "asian"
# • Q02. poptotal(전체인구)을total로, popasian(아시아인구)을asian으로변수명을수정하세요.
head(temp, 0)
# • Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
hist(temp$total, temp$asian)
# • Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
hist(temp$total, temp$asian)
# • Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
hist(temp$total)
# • Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
hist(temp$total/temp$asian)
# • Q03. total, asian변수를이용해'전체인구대비아시아인구백분율' 파생변수를만들고, 히스토그램을 만들어도시들이 어떻게 분포하는지살펴보세요.
temp$his <- temp$total / temp$asian
hist(temp$his)
mean(temp$his)
# • Q04. 아시아인구백분율전체평균을구하고, 평균을초과하면"large", 그외에는"small"을부여하는 파생변수(group)을 만들어 보세요
temp$gap <-  ifelse(temp$his > mean(temp$his), "large", "small")
temp
head(temp)
head(temp, 0)
colnames(temp)[30] <- "group"
head(temp, 0)
table(temp$group)
