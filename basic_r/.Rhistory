data
select(data, id)
select(data, id, math, english) #여러행 셀렉트트
select(data, -id)
class(data)
data
data
# 클래스가 1~3인 행 데이터의 국,영,수 컬럼만 조회(파이프 라인)
data %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 국,영,수 컬럼만 조회(파이프 라인)
data %>%
filter(class %in% 1:3)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class === 1:3)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class == 1:3) %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class == 1:3) %>%
select(math, english, science)
filter(class == c(1:3) %>%
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class == c(1:3)) %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class == c(1:3)) %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class == c(1:3)) %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class %in% c(1:3)) %>%
select(math, english, science)
# 클래스가 1~3인 행 데이터의 수,영,과 컬럼만 조회(파이프 라인)
data %>%
filter(class %in% c(1:3)) %>%
select(math, english, science) %>%
head(10)
#################################################
# 열 정렬하기 arrange(데이터세트, 열...)
# 내림차순 정렬을 하고 싶다면 desc(열)를 이용한다
arrange(data, id)
arrange(data, desc(id))
arrange(data, math)
arrange(data, class, math)#클래스 오른차순, math오름차순순
arrange(data, desc(class), id)
data %>%
filter(class %in% c(1:3) ) %>%
select(id, math) %>%
arrange(desc(math))
#########################################
# 기존 열에 대하여 새로운 열 추가 mutate(데이터세트, 열 = 기준열)
mutate(data, total = math + english + science)
data
#########################################
# 기존 열에 대하여 새로운 열 추가 mutate(데이터세트, 열 = 기준열)
d1 <- mutate(data, total = math + english + science)
d1
# 여러행을 한번에 생성하기
mutate(data, total = math + english + science,
avg = (math + english + science) / 3,
test = "hello")
# 여러행을 한번에 생성하기
d2 <- mutate(data, total = math + english + science,
avg = (math + english + science) / 3,
test = "hello")
d2
#########################################
#기존의 열 추출방법
data$test <-data$math + data$english + data$science
data
###################
# 조건에 따른 파생변수 추가
mutate(d2, exam_result = ifelse(avg >= 60, "pass", "fail"))
d2
###################
# 조건에 따른 파생변수 추가
d3 <- mutate(d2, exam_result = ifelse(avg >= 60, "pass", "fail"))
# 파이프라인으로 한번에 작성하기(total, avg, exam_result)변수
data <- read.csv(("data/excel_exam.csv"))
data
data %>%
mutate(total = math + english + science,
avg = (math + english + science) / 3) %>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail"))
data %>%
mutate(total = math + english + science,
avg = (math + english + science) / 3) %>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %>%
filter(exam_result == "pass") # 그 중 pass인 사람만만
data %>%
mutate(total = math + english + science,
avg = (math + english + science) / 3) %>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %>%
filter(exam_result == "pass") # 그 중 pass인 사람만
result <- data %>%
mutate(total = math + english + science,
avg = (math + english + science) / 3) %>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %>%
filter(exam_result == "pass") # 그 중 pass인 사람만
result
library(ggplot2)
mpg
mpg <- as.data.frame(mpg)
mpg
class(mpg)
mpg
mpg %>%
mutate(x1 = class, cty)
mpg %>%
mutate(x1 = class, cty)
x1 <- mutate(mpg, class, cty)
x1
x1 %>%
select(class %in% "suv")
x1 %>%
filter(class %in% "suv")
x1 %>%
filter(class %in% "suv",
cty) # filter 행추출
x1 %>%
filter(class %in% "suv" &
cty) # filter 행추출
x1 %>%
filter(class %in% "suv" & cty) # filter 행추출
x1 %>%
select(class %in% "suv" & cty) # filter 행추출
x1 <- select(mpg, class, cty)
x1
x1 %>%
select(class %in% "suv" & cty) # filter 행추출
x1 %>%
select(class %in% "suv",
cty) # filter 행추출
x1 %>%
select(class %in% "suv",) # filter 행추출
x1 %>%
select(class %in% "suv") # filter 행추출
x1
x1 %>%
filter(class %in% "suv")
mpg %>%
filter(manufacturer %in% "audi")
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
ifelse(hwy(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
filter(hwy(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(hwy(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(hwy == c(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy(1:5)) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy > nrow(5))) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy > nrow(5)) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy > ncol(5)) %>%
select(manufacturer, model, year, hwy)
arrange(hwy > ncol(6) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
select(ncol(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
select(nrow(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
filter(nrow(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
filter(nrow(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
filter(ncol(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
filter(ncol())
# ===========================================================================
# Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
z1 <- mpg %>%
mutate(total = cty + hwy)
z1
# Q2. 앞에서 만든 '합산 연비 변수'를 2 로 나눠 '평균 연비 변수'를 추가.
z1 <- z1 %>%
mutate(avg = total / 2)
z1
z1
z1
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(avg)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
select(1:5)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
select(1:5)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(1:5)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(1:5)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(c(1:5))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(nrow)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(nrow(1:5))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
select(nrow(1:5))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
select()
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
select(hwy)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(hwy)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(hwy == 1)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(avg %in% c(1:5))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
filter(avg %in% c(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
filter(hwy %in% c(1:5))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
head(10)
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
head(5)
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
head(5)
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
filter(avg >= 35, "high", "row")
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = avg >= 35, "high", "row")
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(avg >= 35, "high", "row")
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = ifelse(avg >= 35, "high", "row"))
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
mpg %>%
mutate(grade = ifelse(avg >= 35, "high", "row"))
# Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
z1 %>%
arrange(desc(avg)) %>%
head(5) # 5위까지 출력
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = ifelse(avg >= 35, "high", "row"))
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(hwy) %>%
select(manufacturer, model, year, hwy) %>%
head(5) # 5위까지 출력
mpg %>%
filter(manufacturer %in% "audi") %>%
arrange(desc(hwy)) %>%
select(manufacturer, model, year, hwy) %>%
head(5) # 5위까지 출력
x1 %>%
filter(class %in% "suv")
mpg %>%
select(class, cty) %>%
filter(class %in% "compact")
mpg %>%
select(class, cty) %>%
filter(class %in% c("compact", "suv"))
z1
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = ifelse(avg >= 35, "high", "row"))
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = ifelse(avg >= 35, "high", "row")),
arrange(desc(avg))
# Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high,
# 35미만이면 row를 추가하는 파이프라인으로 한번에 처리하는 구문을 완성하세요.
z1 %>%
mutate(grade = ifelse(avg >= 35, "high", "row")) %>%
arrange(desc(avg))
# 그룹핑과 요약하기
# summarise(데이터세트, 요약컬럼 = 요약함수)
data <- read.csv("data/excel_exam.csv")
data
class(data)
summarise(data, sum_math = sum(math))
class(summarise(data, sum_math = sum(math)))
summarise(data, sum_math = sum(math), #합계
avg_math = mean(math), #평균
count = n()) #빈도수
d1 <- summarise(data, sum_math = sum(math), #합계
avg_math = mean(math), #평균
count = n()) #빈도수
d1
class(d1)
is.list(d1)
#summarise는 요약정보를 list형태로 반환한다
mean(data$math)
is.list(d1) #list: 자바의 Object형 list와 똑같음(뭐든 다들어갈 수 있다)
is.list(d1) #list: 자바의 Object형 list와 똑같음(뭐든 다들어갈 수 있다)
class(d1)
d1
# group_by()
group_by(data)
#summarise는 요약정보를 list형태로 반환한다
mean(data$math)
# group_by(데이터세트, 변수...)
# 같은 행 데이터별로 묶는다
group_by(data, class)
# group_by(데이터세트, 변수...)
# 같은 행 데이터별로 묶는다
group_by(data, class)
# 사용방법 -> 그룹핑할 컬럼을 group_by()그룹핑 시키고 요약정보를 출력합니다.
d2 <- group_by(data, class)
summarise(d2, math_sum = sum(math))
summarise(d2, math_sum = sum(math),
eng_sum = sum(english),
sci_sum = sum(science))
summarise(d2, math_sum = sum(math),
eng_sum = sum(english),
sci_sum = sum(science),
total = n())
# 클래스별 수학, 영어, 과학의 평균을 요약
summarise(d2, math_avg = mean(math),
eng_avg = mean(english),
sci_avg = mean(science),
math_medi = median(math),
eng_medi = median(english),
sci_medi = median(science))
# 클래스별 수학, 영어, 과학의 평균과 중간값을 요약
summarise(d2, math_avg = mean(math),
eng_avg = mean(english),
sci_avg = mean(science),
math_medi = median(math),
eng_medi = median(english),
sci_medi = median(science),
total = n())
# 파이프라인으로 한번에 작성하기
data %>%
group_by(class) %>% #class로 그룹핑
summarise(matn_sum = sum(data))
# 파이프라인으로 한번에 작성하기
data %>%
group_by(class) %>% #class로 그룹핑
summarise(matn_sum = sum(math))
# 파이프라인으로 한번에 작성하기
data %>%
group_by(class) %>% #class로 그룹핑
summarise(matn_sum = sum(math),
math_avg = mean(math))
# 파이프라인으로 한번에 작성하기
data %>%
group_by(class) %>% #class로 그룹핑
summarise(matn_sum = sum(math),
math_avg = mean(math),
total = n())
# 클래스별 수학, 영어, 과학의 합계를 요약
summarise(d2, math_sum = sum(math),
eng_sum = sum(english),
sci_sum = sum(science),
total = n())
# 여러개를 그룹핑 시키려면 group_by()에 순서대로 적으면 된다
mpg <- as.data.frame(mpg)
table(mpg$manufacturer)
table(mpg$drv)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy),
total = n())
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy),
total = n())
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy),)
class(result)
# 제조사별, 모델의 개수
mpg %>%
group_by(manufacturer, model) %>%
summarise(total = n())
# 제조사별, 모델의 개수
result2 <- mpg %>%
group_by(manufacturer, model) %>%
summarise(total = n()) # 아우디 모델1 - total(몇개를 생산하는가)
as.data.frame(result2)
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy),)
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
